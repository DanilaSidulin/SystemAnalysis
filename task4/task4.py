{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO2DBiTLtLNNZ4MK01q07gn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DanilaSidulin/SystemAnalysis/blob/main/task4/task4.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "abU5EfJRzqa_"
      },
      "outputs": [],
      "source": [
        "from io import StringIO\n",
        "import csv\n",
        "import numpy as np\n",
        "import math\n",
        "\n",
        "def children(mas,max):\n",
        "    children=[]\n",
        "    for i in range(1,max+1):\n",
        "      tmp=[]\n",
        "      for item in mas:\n",
        "        if int(item[0])==i:\n",
        "          tmp.append(item[1])\n",
        "      children.append(tmp)\n",
        "    return children\n",
        "    \n",
        "def get_table(table,max,root):\n",
        "    for k in range(1,max):\n",
        "      for i in range(table.shape[1]):\n",
        "        if table[i,root]==k:\n",
        "          get_table(table, max,i)\n",
        "          for j in range(table.shape[1]):\n",
        "            if table[j,i]!=0:\n",
        "              table[j,root]=table[j,i]+table[i,root]\n",
        "    return table\n",
        "\n",
        "def task(csvString):\n",
        "  \n",
        "  def parents(mas,max):\n",
        "    parents=[]\n",
        "    for i in range(1,max+1):\n",
        "      tmp=[]\n",
        "      for item in mas:\n",
        "        if int(item[1])==i:\n",
        "          tmp.append(item[0])\n",
        "      parents.append(tmp)\n",
        "    return parents\n",
        "  \n",
        "  a = StringIO(csvString)\n",
        "  reader = csv.reader(a, delimiter=',')\n",
        "  out = []\n",
        "  for row in reader:\n",
        "    out.append(row)\n",
        "  max=0\n",
        "  for item in out:\n",
        "    if int(item[0])>max:\n",
        "      max=int(item[0])\n",
        "    if int(item[1])>max:\n",
        "      max=int(item[1])\n",
        "  r1=children(out,max)\n",
        "  r2=parents(out,max)\n",
        "  table=np.zeros((max,max))\n",
        "  for i in range(len(r1)):\n",
        "    for item in r1[i]:\n",
        "      table[int(item)-1,i]=1\n",
        "  root=r2.index([])\n",
        "  table=get_table(table,max,root)\n",
        "  r3=[]\n",
        "  r4=[]\n",
        "  for j in range(max):\n",
        "    count=0\n",
        "    for i in range(max):\n",
        "      if table[i,j]>1:\n",
        "        count+=1\n",
        "    r3.append(count)\n",
        "  for i in range(max):\n",
        "    count=0\n",
        "    for j in range(max):\n",
        "      if table[i,j]>1:\n",
        "        count+=1\n",
        "    r4.append(count)\n",
        "  r5=[0]*max\n",
        "  for k in range(1,max):\n",
        "    count=0\n",
        "    for i in range(table.shape[1]):\n",
        "      if table[i,root]==k:\n",
        "        count+=1\n",
        "    if count>1:\n",
        "      for i in range(table.shape[1]):\n",
        "        if table[i,root]==k:\n",
        "          r5[i]=int(count-1)\n",
        "  for i in range(max):\n",
        "    r1[i]=len(r1[i])\n",
        "    r2[i]=len(r2[i])\n",
        "  l_table=[r1,r2,r3,r4,list(r5)]\n",
        "  l=np.zeros(max)\n",
        "  for item in l_table:\n",
        "    for elem in item:\n",
        "      l[elem]+=1\n",
        "  H=0\n",
        "  for i in range(1,max):\n",
        "    H-=l[i]*i/(max-1)*math.log(i/(max-1),2)\n",
        "  return round(H,2)\n",
        "\n",
        "# task(\"1,2\\n1,3\\n3,4\\n3,5\")"
      ]
    }
  ]
}